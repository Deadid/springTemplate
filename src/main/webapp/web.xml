<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
	
	<servlet>
		<servlet-name>UIServlet</servlet-name>
		<init-param>
		<!-- Also can be specified via :
		1) context-param tag (but then global for all servlets
		2) UIServlet : initParams = { @WebInitParam(name=com.vaadin.server.Constants.SERVLET_PARAMETER_PRODUCTION_MODE, value = "true" )
		3) UIServlet : @VaadinServletConfiguration ( productionMode = true ) - it requires the UI class which we already provided via 
 		* @SpringUI annotation -->
 		
 		<!-- The problem is that maven-resource-filtering works with resources and not with Java classes (can be achieved via hack but looked not nice).
 		So I decided to put the web.xml here while I didn't want to have it in AP --> 
			<param-name>productionMode</param-name>
			<!-- Controlled from pom.xml by maven-resource-filtering -->
			<param-value>${vaadin.production.mode}</param-value>
		</init-param>
	</servlet>
</web-app>
